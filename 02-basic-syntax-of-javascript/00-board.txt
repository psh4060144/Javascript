원시 자료형, 참조 자료형

원시 자료형: 변수에 값이 직접 저장되는 자료형. 불변하며, 값 자체가 복사됨
참조 자료형: 객체의 주소가 저장되는 자료형. 가변적이며, 주소가 복사됨.

원시 자료형: Number, String, null, undefined, Boolean

Number: 정수, 실수 자료형.
const e = Infinity
const g = NaN (Not a Number)
0, -0, NaN 일때 false. 아닐 때 true.

String: 텍스트 데이터를 표현하는 자료형.
+ 연산자를 사용해 문자열끼리 결합할 수 있음. 뺄셈, 곱셈, 나눗셈은 불가능.
''(빈 문자열)일때 false, 아닐 때 true.

Template literals(템플릿 리터럴): backtick(`)을 이용해 f-string 과 같은 역할을 하는 문자열을 만들 수 있음. 줄바꿈도 지원.
`저는 ${age}살입니다.`

null: 프로그래머가 의도적으로 '값이 없음'을 나타낼 때 사용.
undefined: 시스템이나 JS 엔진이 '값이 할당되지 않음'을 나타낼 때 사용.
둘 다 항상 false.

Boolean: true / false. JS 에서는 대문자로 시작하지 않음!



연산자
할당 연산자: 일반적인 사칙연산. 단축 연산자 지원.
증가&감소 연산자: 있긴 한데, 그냥 할당 연산자랑 단축 연산자 쓰자.
비교 연산자: <, >.
동등 연산자: ==. 타입 변환 후 true, false 만을 비교하여 도출. 즉, '1'과 1이 같다고 출력된다. 왜? 둘 다 true 니까. 쓰지말자.
일치 연산자: ===. 두 피연산자의 값과 타입이 모두 같은 경우에만 true 를 반환. python 에서의 == 의 강화판이라고 생각하면 될 듯.
논리 연산자: &&(and), ||(or), !(not). 단축 평가 지원.



삼항 연산자
condition ? expression1 : expression2
condition 에 조건문, expression1 에 참일 때의 결과값, expression2 에 거짓일 때의 결과값



while 과 for 의 차이
결국, for 를 풀어 쓴 것이 while 인 것이고, while 을 한 번에 적은 것이 for 문 인 것...

semi-colon: 필수인 곳이 있고(for), 아닌 곳이 있음... ASI(오토 세미콜론) 기능이 있어서 웬만하면 안 적어줘도 됨.

for-in 과 for-of 의 차이점
객체 관점에서 배열의 index 는 '정수 이름을 가진 열거 가능한 속성'.
for-in 은 정수가 아닌 이름과 속성을 포함하여 열거 가능한 모든 속성을 반환.
즉, 배열의 반복자가 아닌 속성 열거를 사용하기 때문에 순서를 보장할 수 없음. 마치 딕셔너리 순회를 도는 것처럼.
따라서, for-in 은 index 의 순서가 중요한 배열에서는 사용하지 않음. 배열에서는 for, for-of 사용.

for 문에서의 let 과 for-in/for-of 문에서의 const
for 문에서의 정의한 값은 지속해서 변해야 한다. 즉, 재할당하면서 사용해야 하기 때문에 재할당이 불가능한 const 를 쓰면 오류가 난다.
for- 문은 재할당이 아니라 매 반복마다 다른 속성 이름이 변수에 지정되는 것이므로 const 를 사용해도 오류가 안 난다.