함수(Function)

function name([param[, param,[..., param]]]) {
  statements
  return value
}
1. function 키워드
2. 함수의 이름
3. 함수의 매개변수
4. 함수의 body 를 구성하는 statements
5. value 를 return. return 값이 없다면 undefined 를 반환.



함수를 정의하는 2가지 방법
1. 선언식: function funcName() { statements } === 일반적인 함수.
2. 표현식: const funcName = function () { statements } === lambda 느낌



함수 선언식의 특징
호이스팅됨. 코드의 구조와 가독성 면에서는 표현식에 비해 뛰어남.

vs 함수 표현식의 특징
호이스팅이 되지 않음. 함수 이름이 없는 '익명 함수'를 사용할 수 있음.

그럼 둘 중 뭘 더 권장하느냐? 함수 표현식을 더 권장. 왜?
1. 예측 가능성 - 호이스팅의 영향을 받지 않아 코드의 실행 흐름을 더 명확하게 예측 가능.
2. 유연성 - 변수에 할당되므로 함수를 값으로 다루기 쉬움.
3. 스코프 관리 - block scope 를 가지는 let 이나 const 와 함께 사용하여 더 엄격한 scope 관리가 가능.



매개변수
1. 기본 함수 매개변수: 전달하는 인자가 없거나 undefined 가 전달될 경우 이름 붙은 매개변수를 기본값으로 초기화.
2. 나머지 매개변수 (...restPrams): 임의의 수의 인자를 '배열'로 허용하여 가변 인자를 나타냄. * === ...
    but) 함수 정의 시 나머지 매개변수는 하나만 작성 할 수 있으며, 함수 정의에서 매개변수 마지막에 위치해야 함.
했던거잖아? 

매개변수와 인자 갯수가 불일치할 때
1. 매개변수 갯수 > 인자 갯수: 누락된 인자는 undefined 로 할당.
2. 매개변수 갯수 < 인자 갯수: 초과 입력한 인자는 사용하지 않음.



spread syntax(...)
배열이나 문자열과 같이 반복 가능한 항목을 펼치는 것.



*** 화살표 함수 표현식 ***
함수 표현식의 간결한 표현법.
