객체 구조
- 중괄호({})를 이용해 작성
- 중괄호 안에는 key: value 쌍으로 구성된 속성(property)를 여러 개 작성 가능
- key 는 문자열만, value 는 모든 자료형 허용.



메서드
- 객체 속성에 정의된 함수. 객체를 '행동'할 수 있게 함.
- object.method() 방식으로 호출.

this
- 함수나 메서드를 호출한 객체를 가리키는 키워드. 함수 내에서 객체의 속성 및 메서드에 접근하기 위해 사용.
- python 의 self 와 비슷...
- but 함수를 호출하는 방법에 따라 가리키는 대상이 다름.
- 단순 호출: 전역 객체 / 메서드 호출: 메서드를 호출한 객체



객체 문법
1. 단축 속성: 키 이름과 값으로 쓰이는 변수의 이름이 같은 경우 단축 구문을 사용할 수 있음.
2. 단축 메서드: 메서드 선언 시 function 키워드 생략 가능.
3. 계산된 속성: 키값이 대괄호([])로 둘러싸여 있는 속성. 키값에 고정된 값이 아니라 변수값을 사용할 수 있게 됨.
4. 구조 분해 할당: 속성을 같은 이름의 변수에 할당할 때, 쉽게 할당할 수 있는 문법.
5. 전개 구문: '...' 를 활용해 여러 객체를 한 번에 복사 가능.
6. 유용한 메서드: Object.keys(), Object.values()
7. optional chaining: 속성이 없는 중첩 객체를 에러 없이 접근할 수 있는 방법.
   object.method?.() 형식으로 씀. 뒤에 짜다리 더 붙어도 됨. 참조 대상이 null/undefined 라면 에러 대신 undefined 를 반환.
   optional chaining 을 사용하지 않는다면 && 연산자를 사용해야 함.
   참조가 누락될 가능성이 있는 경우 연결된 속성으로 접근할 때 더 짧고 간단한 표현식을 작성할 수 있음.
   어떤 속성이 필요한지에 대한 보증이 확실하지 않는 경우에 객체의 내용을 더 편리하게 탐색할 수 있음.
   남용하지 말 것.